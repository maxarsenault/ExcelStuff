<?


class ExcelFunctions {

  static private $current_title = "" ;


  
  static public function getSheet( $xml ) {
    return $xml->sheetData[0] ;
  }
  
  static public function findRowByNumber( $sheet, $search ) {
  
    $rows = $sheet->children() ;
    $rowslength = count( $rows ) ;  
  
    $search = trim( $search ) ;
  
    for ( $i = 0 ; $i < $rowslength ; $i++ ) {
	  if ( isset($rows[$i]['r']) && $rows[$i]['r'] == $search ) {
	    return $rows[$i] ;
	  }
	}
    return false ;
  }

  static public function findSheet( $file, $search ) {

    $xml = simplexml_load_file($file);
    $search = implode( "", explode( " ", urldecode( $search )) ) ;
  
    $count = 1 ;
    foreach ($xml->sheets[0]->sheet as $sheet ) {
  
      $name = $sheet->attributes()->name ;
      $name = implode( "", explode( " ", $name ) ) ;
  
      //error_log( strtolower($name) . ":" . strtolower($search) ) ;
  
      if ( strtolower($name) == strtolower($search) ) {
	    //error_log( "success" ) ;
	    return "sheet". $count . ".xml" ;
	  }
      $count++ ;
    }

    // Sheet not found
    return false ;
  }

  // $id is the full excel id, letter + number.
  //   Example: "D24"
  public static function clearCellById( $row, $id ) {
  
    foreach($row->c as $cell) {
  
      if($cell['r'] == $id) {
        $dom=dom_import_simplexml($cell);
        $dom->parentNode->removeChild($dom);
      }
    }
  }
  
  // $id is just the row number.
  //   Example: "24"
  
  // Currently corrupts the file in excel
  public static function clearRowById( $sheetData, $id ) {
  
    foreach($sheetData->row as $row) {
  
      if($row['r'] == $id) {
        $dom=dom_import_simplexml($row);
        $dom->parentNode->removeChild($dom);
      }
    }
  }
  
  public static function getCellCol( $rowId, $cell ) {
    $cellId = ExcelFunctions::getCellId( $cell ) ;
    return trim(str_replace( $rowId, '', $cellId )) ;
  }
  
  // Gets the non numeric part of a cell id
  public static function stripCellCol( $cell ) {
   
    $str = "" ;
	$colId = $cell['r'] ;
	
	for ( $i = 0 ; $i < strlen( $colId ) ; $i++ ) {
	
	  $substring = substr( $colId, $i, 1 ) ;
	
	  if ( !is_numeric( $substring ) ) {
	    $str .= $substring ;
	  } else{
	    return $str ;
	  }
	}
	return $str ;
  }
  
  public static function getCellId( $cell ) {
    if ( $cell != null ) {
      return trim($cell->attributes()->r) ;
    } else {
      return -1 ;
    }
  }
  
  public static function getRowId( $row ) {
    return trim($row->attributes()->r) ;
  }
  
  public static function addCell() {
  
  }

  function collectChart( $xml, $sharedStrings ) {

    $chart = new ExcelChart( $sharedStrings ) ;
	
    foreach( $xml->sheetData[0]->children() as $rowkey => $row ) {
	
      if ( count($row->children()) == 0 ) {
        continue ;
      } else {
        $chart->addRow( $row ) ;
      }
    }
    
    return $chart ;
  }

  public static function getCurrentTitle() {
    return ExcelFunctions::$current_title ;
  }

  public static function setCurrentTitle( $title ) {
    ExcelFunctions::$current_title = $title ;
  }
  
  public static function addRowToXML( $sheet, $currentRowIndex ) {

    $row = $sheet->addChild('row') ;
    $row->addAttribute('r', $currentRowIndex) ;
    $row->addAttribute('x14ac:dyDescent', '0.25') ;
    $row->addAttribute('spans', '1:22') ;
	
	return $row ;
  }
  
  public static function setCellValue( $cell, $value, $sharedDest ) {
    if ( is_numeric( $value ) ) {
      $cell->v[0] = $value ;
  	} else if ( ($stringIndex = $sharedDest->sharedStringIndex( $value )) !== false ) {
      $cell->v[0] = $stringIndex ;	
    } else {
      $cell->v[0] = $sharedDest->addSharedString( $value ) ;
    }
  }
  
  
  public static function addCellToRow( $row, $sharedDest, $x_index, $value, $style = "", $formula = "" ) {
  
    $value = trim($value) ;
  	$newcell = $row->addChild('c') ;
	
    $colLetter = PHPExcel_Cell::stringFromColumnIndex( $x_index - 1 ) ;
    $currentRowIndex = $row->attributes()->r ;
    $newcell->addAttribute( 'r', $colLetter . $currentRowIndex ) ;
	
    //error_log( $colLetter . $currentRowIndex ) ;
	
    if ( !is_numeric( $value ) ) {
    
      if ( ($stringIndex = $sharedDest->sharedStringIndex( $value )) !== false ) {
        $newcell->addChild('v', $stringIndex ) ;
      
      //error_log( "String found outcome: " . $value . ", index = " . $stringIndex  ) ;
      } else {
      $newcell->addChild('v', $stringIndex = $sharedDest->addSharedString( $value ) ) ;
      //error_log( "String added outcome: " . $value . ", index = " . $stringIndex  ) ;
      }    
    
        $newcell->addAttribute( 't', 's' ) ;
      if ( $style !== "" ) {
          $newcell->addAttribute( 's', $style ) ;
      }
    } else {
      $newcell->addChild('v', $value ) ;
      if ( $style !== "" ) {
          $newcell->addAttribute( 's', $style ) ;
      }
    }
 
    return $newcell ;
  }

  
  public static function appendMarketShareFromDBv2( $xml, $sharedA, $getsetnumber, $tag ) {
  
    $query = "SELECT DISTINCT EE2_values.row_id FROM EE2_values WHERE set_id='".mysql_real_escape_string($getsetnumber)."' and x_index='5' and value LIKE '".mysql_real_escape_string($tag)."' ORDER BY EE2_values.row_id ASC" ;
    $query = mysql_query( $query ) or die( error_log( "1. ExcelFunctions::appendMarketShareFromDB(): " . mysql_error() ) ) ;
  
    $columns = array() ; // Array of arrays containing cell info.
    $totals  = array() ; // Array of totals of each column.
	$rows    = array() ; // Array of rows indexed by id.
	
	$labels  = array() ; // label columns

  
    while( $temp = mysql_fetch_array( $query, MYSQL_ASSOC ) ) {
	  
	  $query2 =  "SELECT DISTINCT EE2_values.row_id, EE2_values.x_index, EE2_values.value, EE2_titles.title FROM EE2_values INNER JOIN EE2_titles ON EE2_values.set_id=EE2_titles.set_id and EE2_values.row_id=EE2_titles.row_id WHERE EE2_values.set_id='".mysql_real_escape_string($getsetnumber)."' and EE2_values.row_id='" . $temp['row_id']."' ORDER BY EE2_values.row_id ASC, EE2_values.x_index ASC" ;
	  //$query2 =  "SELECT set_id, row_id, label,	x_index, y_index, value FROM EE2_values WHERE set_id='".mysql_real_escape_string($getsetnumber)."' and row_id='" . $temp['row_id']."' ORDER BY EE2_values.row_id ASC, EE2_values.x_index ASC" ;
	  
	  $query2 = mysql_query( $query2 ) or die( error_log( "2. ExcelFunctions::appendMarketShareFromDB(): " . mysql_error() ) ) ;
	  
	  
	  while( $temp2 = mysql_fetch_array( $query2, MYSQL_ASSOC ) ) {
	    //error_log( implode( ',', $temp2) ) ;
	  
	    $rows[ $temp2['row_id'] ] = 1 ;
	    // error_log( "Just added " . $temp2['row_id'] . " to array" ) ;
	  
	  
	    if ( ($adjusted_x = $temp2['x_index']) >= 6 ) {
		  // This should put an empty column between each existing column, but only after we get the labels out (x_index == 6 and after)
	      $adjusted_x = ((($adjusted_x - 5) * 2) - 1) + 5 ;
	    } else if ( $temp2['x_index'] == 5 ) {
		  $labels[ $temp2['row_id'] ] = $temp2['title'] ;
		  continue ;
		}
	  
	    if ( !isset( $columns[ $adjusted_x ] ) ) {
		  $columns[ $adjusted_x ] = array() ;
		}
		
		if ( !isset( $totals[ $adjusted_x ] ) ) {
		  $totals[ $adjusted_x ] = 0 ;
		}
		
		$columns[ $adjusted_x ][] = $temp2 ;
	
		if ( !isset( $totals[ $adjusted_x ] ) && is_numeric($temp2['value']) ) {
		  $totals[ $adjusted_x ] = $temp2['value'] ;
		} else if ( is_numeric($temp2['value']) ) {
		  $totals[ $adjusted_x ] += $temp2['value'] ;
		}
	  }
	}
	
	$sheet = $xml->sheetData[0] ;
	$currentRowIndex = trim( $sheet->row[ count($sheet->row) - 1 ]->attributes()->r ) + 1 ;
	$quarter = array( "Q1", "Q2", "Q3", "Q4", "YET" ) ;
	$year    = 2006 ;
	
	/*
	$labelrow = ExcelFunctions::addRowToXML( $sheet, $currentRowIndex++ ) ;
	for( $i = 0 ; $i < 50 ; $i++ ) {
	  if ( $i % 5 == 0 ) {
	    $year += 1 ;
	  }
	  ExcelFunctions::addCellToRow( $labelrow, $sharedA, 4+($i*2 - 1), ($year . $quarter[$i % 5]) ) ;
	  ExcelFunctions::addCellToRow( $labelrow, $sharedA, 4+($i*2), '%' ) ;
	}*/
	
	/*
	foreach( $rows as $row_id => $val ) {
	  $rows[$row_id] = ExcelFunctions::addRowToXML( $sheet, $currentRowIndex++ ) ;
	  //$currentRowIndex += 1 ;
	}*/
	
	$uninit = 1 ;
	
	// this needs to be a temporary solution because it'll error if the columns don't start on Q1
	foreach( $columns as $x => $cells ) {
	
	  if ( $x < 5 ) {
	    continue ;
      }
	
	
	  if ( ( ($x - 6) % 10 == 0 ) || $uninit == 1 ) {
	  
	  
	    //////// Title rows yellow
		////
		//
		
		// Sorry, not the easiest to read. But it's really not that complicated.
	    $titlerow = ExcelFunctions::addRowToXML( $sheet, $currentRowIndex++ ) ;
		for ( $i = 1 ; $i < 12 ; $i++ ) { ExcelFunctions::addCellToRow( $titlerow, $sharedA, $i, '', 14 ) ; }
	    $titlerow = ExcelFunctions::addRowToXML( $sheet, $currentRowIndex++ ) ;
		ExcelFunctions::addCellToRow( $titlerow, $sharedA, 1, ucwords($tag).' Software', 14 ) ;
		for ( $i = 2 ; $i < 12 ; $i++ ) { ExcelFunctions::addCellToRow( $titlerow, $sharedA, $i, '', 14 ) ; }
	    $titlerow = ExcelFunctions::addRowToXML( $sheet, $currentRowIndex++ ) ;
		ExcelFunctions::addCellToRow( $titlerow, $sharedA, 1, 'Market Shares Dollars, Worldwide, '.$year, 14 ) ;
		for ( $i = 2 ; $i < 12 ; $i++ ) { ExcelFunctions::addCellToRow( $titlerow, $sharedA, $i, '', 14 ) ; }
	    $titlerow = ExcelFunctions::addRowToXML( $sheet, $currentRowIndex++ ) ;
		ExcelFunctions::addCellToRow( $titlerow, $sharedA, 1, 'In Millions of Dollars', 14 ) ;
		for ( $i = 2 ; $i < 12 ; $i++ ) { ExcelFunctions::addCellToRow( $titlerow, $sharedA, $i, '', 14 ) ; }
	    $titlerow = ExcelFunctions::addRowToXML( $sheet, $currentRowIndex++ ) ;
		for ( $i = 1 ; $i < 12 ; $i++ ) { ExcelFunctions::addCellToRow( $titlerow, $sharedA, $i, '', 14 ) ; }
		//
		////
	    //////// Title rows yellow

		
	    // Unit labels (light blue)
	    $labelrow = ExcelFunctions::addRowToXML( $sheet, $currentRowIndex++ ) ;
        ExcelFunctions::addCellToRow( $labelrow, $sharedA, 1, '', 8 ) ;
		for ( $i = 0 ; $i < 5 ; $i++ ) {
		  ExcelFunctions::addCellToRow( $labelrow, $sharedA, $i * 2 + 2, 'MM$', 8 ) ;
		  ExcelFunctions::addCellToRow( $labelrow, $sharedA, $i * 2 + 3, '%', 8 ) ;
		}
	  
	    // Add "dark" blue. Year and quarter labels.
	    $labelrow = ExcelFunctions::addRowToXML( $sheet, $currentRowIndex++ ) ;
		ExcelFunctions::addCellToRow( $labelrow, $sharedA, 1, '', 7 ) ;
		for ( $i = 0 ; $i < 5 ; $i++ ) {
		  ExcelFunctions::addCellToRow( $labelrow, $sharedA, $i * 2 + 2, $year . $quarter[ $i ], 7 ) ;
		  ExcelFunctions::addCellToRow( $labelrow, $sharedA, $i * 2 + 3, '', 7 ) ;
		}
		$year++ ;	
	
	    // Add blank row (light green)
		$fillerrow = ExcelFunctions::addRowToXML( $sheet, $currentRowIndex++ ) ;
		for ( $i = 1 ; $i < 12 ; $i++ ) {
		  ExcelFunctions::addCellToRow( $fillerrow, $sharedA, $i, '', 15 ) ;
		}
	
	    // Content rows and category labels, Labels for each row. (light green)
	    foreach( $rows as $row_id => $val ) {
	      $rows[$row_id] = ExcelFunctions::addRowToXML( $sheet, $currentRowIndex++ ) ;
		  ExcelFunctions::addCellToRow( $rows[ $row_id ], $sharedA, 1, $labels[ $row_id ], 15 ) ;
	    }
		
		// Another filler row after content rows
		$fillerrow = ExcelFunctions::addRowToXML( $sheet, $currentRowIndex++ ) ;
		for ( $i = 1 ; $i < 12 ; $i++ ) {
		  ExcelFunctions::addCellToRow( $fillerrow, $sharedA, $i, '', 8 ) ;
		}
		
		
		$totalrow = ExcelFunctions::addRowToXML( $sheet, $currentRowIndex++ ) ;
		
		// Another filler row after total row
		$fillerrow = ExcelFunctions::addRowToXML( $sheet, $currentRowIndex++ ) ;
		for ( $i = 1 ; $i < 12 ; $i++ ) {
		  ExcelFunctions::addCellToRow( $fillerrow, $sharedA, $i, '', 8 ) ;
		}
		
	    // Source (Some type of green)
	    $source = ExcelFunctions::addRowToXML( $sheet, $currentRowIndex++ ) ;
	    for ( $i = 1 ; $i < 12 ; $i++ ) {
		  ExcelFunctions::addCellToRow( $source, $sharedA, $i, '', 16 ) ;
        }
	    $source = ExcelFunctions::addRowToXML( $sheet, $currentRowIndex++ ) ;
		ExcelFunctions::addCellToRow( $source, $sharedA, 1, 'Source: WinterGreen Research Inc.', 16 ) ;
	    for ( $i = 2 ; $i < 12 ; $i++ ) {
		  ExcelFunctions::addCellToRow( $source, $sharedA, $i, '', 16 ) ;
        }
		
		$currentRowIndex += 6 ;
		$uninit = 0 ;
	  }
	   
	  
	  foreach( $cells as $celldata ) {
	  
		if ( $x == 5 ) {
		  ExcelFunctions::addCellToRow( $rows[ $celldata['row_id'] ], $sharedA, $x - 4, $celldata['title']." ".$celldata['value'], 15 ) ;
		} else {
	
	      ExcelFunctions::addCellToRow( $rows[ $celldata['row_id'] ], $sharedA, ((($x - 5) % 10) + 6) - 5, $celldata['value'], 15 ) ;
		  if ( $x >= 6 && is_numeric($celldata['value']) ) {
		    ExcelFunctions::addCellToRow( $rows[ $celldata['row_id'] ], $sharedA, ((($x - 5) % 10) + 7) - 5, 100*($celldata['value']/$totals[ $x ]), 15 ) ;
		  }
		}
	  }
	  
	  ExcelFunctions::addCellToRow( $totalrow, $sharedA, 1, "Total", 7 ) ;
	  ExcelFunctions::addCellToRow( $totalrow, $sharedA, ((($x - 5) % 10) + 6) - 5, $totals[ $x ], 7 ) ;
	  ExcelFunctions::addCellToRow( $totalrow, $sharedA, ((($x - 5) % 10) + 7) - 5, 100, 7 ) ;
	 
	}
	
	
  }
  
  
  public static function appendMarketShareFromDB( $xml, $sharedA, $getsetnumber, $tag ) {
  
    $query = "SELECT DISTINCT EE2_values.row_id FROM EE2_values WHERE set_id='".mysql_real_escape_string($getsetnumber)."' and x_index='5' and value LIKE '".mysql_real_escape_string($tag)."' ORDER BY EE2_values.row_id ASC" ;
    $query = mysql_query( $query ) or die( error_log( "1. ExcelFunctions::appendMarketShareFromDB(): " . mysql_error() ) ) ;
  
    $columns = array() ; // Array of arrays containing cell info.
    $totals  = array() ; // Array of totals of each column.
	$rows    = array() ; // Array of rows indexed by id.

  
    while( $temp = mysql_fetch_array( $query, MYSQL_ASSOC ) ) {
	  
	  $query2 =  "SELECT DISTINCT EE2_values.row_id, EE2_values.x_index, EE2_values.value, EE2_titles.title FROM EE2_values INNER JOIN EE2_titles ON EE2_values.set_id=EE2_titles.set_id and EE2_values.row_id=EE2_titles.row_id WHERE EE2_values.set_id='".mysql_real_escape_string($getsetnumber)."' and EE2_values.row_id='" . $temp['row_id']."' ORDER BY EE2_values.row_id ASC, EE2_values.x_index ASC" ;
	  //$query2 =  "SELECT set_id, row_id, label,	x_index, y_index, value FROM EE2_values WHERE set_id='".mysql_real_escape_string($getsetnumber)."' and row_id='" . $temp['row_id']."' ORDER BY EE2_values.row_id ASC, EE2_values.x_index ASC" ;
	  
	  $query2 = mysql_query( $query2 ) or die( error_log( "2. ExcelFunctions::appendMarketShareFromDB(): " . mysql_error() ) ) ;
	  
	  
	  while( $temp2 = mysql_fetch_array( $query2, MYSQL_ASSOC ) ) {
	  
	    //error_log( implode( ',', $temp2) ) ;
	  
	    $rows[ $temp2['row_id'] ] = 1 ;
	    // error_log( "Just added " . $temp2['row_id'] . " to array" ) ;
	  
	  
	    if ( ($adjusted_x = $temp2['x_index']) >= 6 ) {
		  // This should put an empty column between each existing column, but only after we get the labels out (x_index == 6 and after)
	      $adjusted_x = ((($adjusted_x - 5) * 2) - 1) + 5 ;
	    }
	  
	    if ( !isset( $columns[ $adjusted_x ] ) ) {
		  $columns[ $adjusted_x ] = array() ;
		}
		
		if ( !isset( $totals[ $adjusted_x ] ) ) {
		  $totals[ $adjusted_x ] = 0 ;
		}
		
		$columns[ $adjusted_x ][] = $temp2 ;
	
		if ( !isset( $totals[ $adjusted_x ] ) && is_numeric($temp2['value']) ) {
		  $totals[ $adjusted_x ] = $temp2['value'] ;
		} else if ( is_numeric($temp2['value']) ) {
		  $totals[ $adjusted_x ] += $temp2['value'] ;
		}
	  }
	}
	
	$sheet = $xml->sheetData[0] ;
	$currentRowIndex = trim( $sheet->row[ count($sheet->row) - 1 ]->attributes()->r ) + 1 ;
	$quarter = array( "Q1", "Q2", "Q3", "Q4", "YET" ) ;
	$year    = 2005 ;
	
	$labelrow = ExcelFunctions::addRowToXML( $sheet, $currentRowIndex++ ) ;
	for( $i = 0 ; $i < 50 ; $i++ ) {
	  if ( $i % 5 == 0 ) {
	    $year += 1 ;
	  }
	  ExcelFunctions::addCellToRow( $labelrow, $sharedA, 4+($i*2 - 1), ($year . $quarter[$i % 5]) ) ;
	  ExcelFunctions::addCellToRow( $labelrow, $sharedA, 4+($i*2), '%' ) ;
	}
	
	
	foreach( $rows as $row_id => $val ) {
	  $rows[$row_id] = ExcelFunctions::addRowToXML( $sheet, $currentRowIndex++ ) ;
	  //$currentRowIndex += 1 ;
	}
	
	/*
	error_log( "EVERYTHING IN COLUMN 1: " ) ;
	foreach ($columns[1] as $celldata ) {
	  error_log( $celldata['value'] ) ;
	}
	die() ;*/
	
	foreach( $columns as $x => $cells ) {
	  foreach( $cells as $celldata ) {
	  
	    if ( $x < 5 ) {
		  continue ;
		}
	  
		if ( $x == 5 ) {
		  ExcelFunctions::addCellToRow( $rows[ $celldata['row_id'] ], $sharedA, $x - 3, $celldata['title'] ) ;
		} else {
	
	      ExcelFunctions::addCellToRow( $rows[ $celldata['row_id'] ], $sharedA, $x - 3, $celldata['value'] ) ;
		  if ( $x >= 6 && is_numeric($celldata['value']) ) {
		    ExcelFunctions::addCellToRow( $rows[ $celldata['row_id'] ], $sharedA, $x + 1 - 3, 100*($celldata['value']/$totals[ $x ]) ) ;
		  }
		}
	  }
	}
	
	
  }
  
  public static function appendToXMLFromDB( $set_id, $xml, $sharedDest ) {
  
    //$query = "SELECT DISTINCT label, x_index, y_index, value FROM EE2_values WHERE set_id='".mysql_real_escape_string($set_id)."' ORDER BY row_id ASC, y_index ASC, x_index ASC" ;
	
	//$query = "SELECT EE2_values.label, EE2_values.x_index, EE2_values.y_index, EE2_values.value FROM (SELECT DISTINCT row_id FROM EE2_tag_rows WHERE set_id='".mysql_real_escape_string($set_id)."' ORDER BY row_id ASC) temp INNER JOIN EE2_values ON EE2_values.row_id=temp.row_id WHERE set_id='".mysql_real_escape_string($set_id)."' ORDER BY temp.row_id ASC, EE2_values.y_index ASC, EE2_values.x_index ASC" ;
	
	$query = "SELECT DISTINCT EE2_values.row_id, EE2_values.x_index, EE2_values.y_index, EE2_values.value FROM EE2_values WHERE set_id='".mysql_real_escape_string($set_id)."' ORDER BY EE2_values.row_id ASC, EE2_values.y_index ASC, EE2_values.x_index ASC" ;
	
    $query = mysql_query( $query ) or die( error_log( "ExcelChart::appendToXMLFromDB(): " . mysql_error() ) ) ;
  
	$cur_label = "" ;
	
    $sheet = $xml->sheetData[0] ;

    while( $temp = mysql_fetch_array( $query, MYSQL_ASSOC ) ) {
	  
	  if ( trim($temp['value']) == "" ) {
	    continue ;
	  }
	  
	  if ( $cur_label != $temp['value'] && $temp['x_index'] == 1 ) {
	  
	  	$currentRowIndex = trim( $sheet->row[ count($sheet->row) - 1 ]->attributes()->r ) + 1 ;
		
		//die( "CurrentRowIndex: " . $currentRowIndex ) ;
		
	    $cur_label  = $temp['value'] ;
	    $cur_row_id = -1 ;
	  }
	  
	  if ( $cur_row_id == -1 || $cur_row_id != $temp['y_index'] ) {
	  
	    $currentRowIndex += 1 ;
		$cur_row = ExcelFunctions::addRowToXML( $sheet, $currentRowIndex ) ;
		// Assign new row to $cur_row
		$cur_row_id = $temp['y_index'] ;
	  }
	  
	  // Add cell data from $temp to $cur_row
	  ExcelFunctions::addCellToRow( $cur_row, $sharedDest, $temp['x_index'], $temp['value'] ) ;
	  // echo "<br/>Row index: ". $currentRowIndex ." -row_id: " . $temp['row_id'] . " -x_index: ".$temp['x_index']. " -y_index: ".$temp['y_index']." -value: "  . $temp['value'] . "<br/>" ;
	}
  }

}


?>